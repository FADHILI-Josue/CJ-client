// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for both clients and admins
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName  String
  password  String   @db.VarChar(255) // Hashed password
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  account Account? // A user has one account
  devices Device[] // A user can have multiple devices

  @@map("users")
}

// Account model for savings
model Account {
  id        String   @id @default(cuid())
  balance   Decimal  @default(0.00) @db.Decimal(12, 2)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

// Transaction model
model Transaction {
  id          String          @id @default(cuid())
  amount      Decimal         @db.Decimal(12, 2)
  type        TransactionType
  description String?
  createdAt   DateTime        @default(now())
  accountId   String

  // Relations
  account Account @relation(fields: [accountId], references: [id])

  @@map("transactions")
}

// Device model for the verification requirement
model Device {
  id        String       @id @default(cuid())
  deviceId  String       @db.VarChar(255) // e.g., a hash of the User-Agent or a generated UUID
  status    DeviceStatus @default(PENDING)
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // A user can only have one entry per deviceId
  @@unique([userId, deviceId])
  @@map("devices")
}

enum Role {
  CLIENT
  ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}

enum DeviceStatus {
  PENDING
  VERIFIED
  REJECTED
}